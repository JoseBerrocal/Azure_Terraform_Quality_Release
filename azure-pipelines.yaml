name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:

#BUILS STAGE
############
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '52.255.162.168 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDS40Hm9WI5u+BTkUdwuvj4ujBbmApN25+KTeyMIBzEhbxAjfyqk7TMcfOmR7UDs/RpK9b8FO0I8L/XXSMA2IVE='
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDFW1r1Ob7uO7nDPxqFiP2E9QxcTN/Zoz6cvHA1kcFrgeoCO+9OzuJ0ai0es/juh9Su74sK6afPrK8X+nl4LvYWtRP9jsDQaKt6ZmB/NgnFhi/zXiImQ4SMAnpjmAJZLIi/T7K9t+XKlMiE6dSs+5arloNP5G7HywU4eEGGkfwyvlchw4m1/n1pzfKZn/mWO/Mi8UJE8bzqkblJtOD23L04cAjFG4LIcvkDnImm3d3hcihbPK2OILyspCXCwBlSesol7KUDvb+f3LY/bNuAlNW1oq/zjUM0RwYcHu5StbmrORQDhuwUkSy9tWkRzUE2kMAaa2HVnzyukGgkjUvvUgPxLve459V3+xWf8ZlGizuItnQcU128B+p+EAIJeHIvmyKIa3/4rLMMylrnaUCVDOYFn8QMAOkuojI0BEx2J/ZOJUCQ1HJM5VWgCVFsJnxH6tGiPzaH1duDqlc1k0940fId9I1ONIkWrjBGxkJUXzNog+XNpXH99rD8I9BHXNs1WlanOBi6vc0Zo0xBbu9SZI4FAOIWNvYs24BdPphdT1cMDmBCTE57vfAI10Pav4PSIBnk3LJ6b06zehq9wBIoEtYyQifklJ0bi7/jTfl47+9xt35JE2hZ7/3UNfzZUKruBmXumrKsNh9KQK6au1rF/9G/shTPXo6wE7+alq8qYGrJGQ== casita@localhost.localdomain'
        sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'StarterAPIs.json'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

# INCLUDING POSTMAN
    - task: Bash@3
      displayName: 'Install newman'
      inputs:
        targetType: 'inline'
        script: |
          sudo npm install -g newman
          pwd

    - task: Bash@3
      displayName: 'get some values'
      inputs:
        targetType: 'inline'
        script: |
          echo "Aqui esta ubicado el archivo json"
          locate StarterAPIs.json
          echo "El valor de la carpeta build"
          echo $(Build.SourcesDirectory)
          echo "El valor de la carpeta system default direcotry"
          echo $(System.DefaultWorkingDirectory)
          locate _Azure_Project_Quality_Release.git
          echo "Aqui esta la carpeta del repositorio"
          pwd
          echo "El pwd"
          ls -lrthaR
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      displayName: 'Run Postman'
      inputs:
        script: 'newman run Test_Collection_postman.json -e Env_Test_Collection_postman.json --reporters cli,json --reporter-json-export Results\junitReport.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/'


# FINISH POSTMAN

    - task: CopyFilesOverSSH@0
      displayName: 'Copy files to VM'
      inputs:
        sshEndpoint: 'Connect to VM-Project'
        contents: '*/*/*py*'
        readyTimeout: '20000'
        overwrite: true
        flattenFolders: false
        sourceFolder: ''

#DEPLOY STAGE
#############
- stage: Deployment
  jobs:


        #sourceFolder: # Optional
        #contents: '**' 
        #targetFolder: # Optional
        #cleanTargetFolder: false # Optional
        #overwrite: true # Optional
        #failOnEmptySource: false # Optional
        #flattenFolders: false # Optional

        
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'VM-Project_Deployment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure subscription 1 (a1b378f5-e11a-41ae-9661-917c3e0195cc)'
              appName: 'ProjectAzureJBmyApplicationTest-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

  - deployment: VMDeploy
    displayName: Configure VM
    environment:
      name:  'VM-Project_Deployment'
      resourceType: VirtualMachine
      tags: VM2
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install requirements in VM'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
              
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                echo "Chromium-Browser Installed"
                pip3 install selenium
                echo "Selenium Installed"
                export PATH=$PATH:some/path
                echo "Output of PATH"
                echo $PATH
                echo "Hello World this works"
                sudo rm -rf chromedriver*
                wget "https://chromedriver.storage.googleapis.com/83.0.4103.39/chromedriver_linux64.zip"


          - task: ExtractFiles@1
            displayName: 'Extract file'
            inputs:
              archiveFilePatterns: '*chromedriver_linux64.zip'
              destinationFolder: ''
              cleanDestinationFolder: false

          - task: Bash@3
            displayName: 'Finish requirements in VM'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                pwd
                sudo cp chromedriver /usr/bin
                echo "Done Coping"              



#The Selelium Test
          - task: Bash@3
            displayName: 'The Selenium Test Test'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
              
                pwd
                pwd
                echo "Hello World this works"
                cd /home/casita/automatedtesting/selenium/
                #wget https://chromedriver.storage.googleapis.com/81.0.4044.138/chromedriver_linux64.zip
                #unzip chromedriver_linux64.zip
                #cat /home/casita/automatedtesting/selenium/login.py
                python3 /home/casita/automatedtesting/selenium/login.py


  #The Jmeter Test
  - job: Jmeter
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AlexandreGattiker.jmeter-tasks.custom-jmeter-installer-task.JMeterInstaller@0
      displayName: 'Install JMeter 5.2.1'